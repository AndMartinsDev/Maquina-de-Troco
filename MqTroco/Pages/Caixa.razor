@page "/caixa"

<PageTitle>Caixa</PageTitle>

<PageTitle>Caixa</PageTitle>
<div class="card border-primary mb-1" style="box-shadow:10px 5px 5px black; min-height:40rem;">
  <div class="card-header" style="display:flex"><h1> - Bem Vindo!!! <smal> - Esta é a Maquina de Troco -</smal></h1></div>
	<div class="card-body" style="padding:3rem;">
			<div class="container" style="display:flex;">
				<div class="row gx-5">	
				
				<!--Componente que Gera info do Caixa na tela-->
				<div class="col" style="min-width:350px; margin-top:0;">
					<ul class="list-group">
						<a href="#" class="txt-center list-group-item list-group-item-action active">
							<h2 style="tex-align:center; text-align:center;">$$ CAIXA $$</h2>
						</a>
						@foreach (var moeda in moedasCaixa)
						{
							<li class="list-group-item d-flex justify-content-between align-items-center">
									<h5>Moedas @moeda.Nome</h5>
								<span class="badge bg-primary rounded-pill-lg" style="font-size:1rem;">@moeda.Qtd</span>
							</li>	
						}
					</ul>
				</div>

				<!--Componente de Informação (qtd Moedas e Valor Total)-->
				<div class="col-1" style="padding:2rem; min-width:350px; display: flex; justify-content: center;">
					<fieldset class="form-group">
						<legend class="mt-4"><h1 style="padding-left:1.5rem;">Informações</h1></legend>
						<div class="form-check form-switch">
							<label class="form-check-label" for="flexSwitchCheckDefault"><h5>Valor Total de Moedas</h5></label>						
							<label class="form-check-label" for="flexSwitchCheckDefault"><h5 style="font-size: xx-large; padding-left:2.5rem;">@vlrTotalMoedas.ToString("C")</h5></label>
						</div>
					  <div class="form-check form-switch">
						<label class="form-check-label" for="flexSwitchCheckChecked"><h5>Quantidade Total de Moedas</h5></label>
						<label class="form-check-label" for="flexSwitchCheckDefault"><h5 style="font-size: xxx-large; padding-left:5.5rem;">@qtdTotalMoedas</h5></label>
					  </div>
					</fieldset>
				</div>

				<!--Componente Abastecer Moedas-->
				<div class="col card text-white bg-success mb-3" style="box-shadow: 10px 5px 5px black; min-width:400px; margin-top:1rem; text-align: center;">
					<div class="card-header">
						<h1><strong>Abastecer Moedas</strong></h1>
					</div>
					<div class="card-body">
						<form>
								<h5>Escolha a Moeda Que Você Deseja Abastecer:</h5>
								<div class="form-group">
								<fieldset class="form-group">
									<label for="customRange3" class="form-label"><h2>@nomesMoedasAbasteceMoedas[@idMoedaSelectedAbasteceMoedas]</h2></label>
									<input type="range" class="form-range" style="max-width:350px;" min="0" max="5" step="1" id="customRange3"@bind-value="@idMoedaSelectedAbasteceMoedas">
								</fieldset>

								<div class="input-group mb-3" style="display: flex; justify-content: center;">
									<span class="input-group-text">$</span>
										<input type="number" class="form-control" style="font-size: xx-large; text-align: center; max-width:200px;" aria-label="Amount (to the nearest dollar)" @bind-value="@qtdMoedasSelectedAbasteceMoedas">
									<span class="input-group-text">$</span>
									<button class="btn btn-secondary" type="button" id="button-addon2" @onclick="AbasteceMoedas"><h5>Adicionar <br/> Quantidade</h5></button>
								</div>
							</div>	
						</form>
					</div>
				</div>
			</div>
		</div>

		<div class="row gx-5">	
			<div class="container" style="display:flex;">
				<!--Componente Sangria de Moedas-->
				<div class="col-5 card text-white bg-danger mb-3" style="box-shadow: 10px 5px 5px black; min-width:350px; margin:1rem; text-align: center;">
					<div class="card-header">
						<h1><strong>Sangria de Moedas</strong></h1>
					</div>
					<div class="card-body"
						<form>
								<h5>Escolha a Moeda Que Você Deseja Abastecer:</h5>
								<div class="form-group">
								<fieldset class="form-group">
									<label for="customRange3" class="form-label"><h2>@nomesMoedasSangriaMoedas[@idMoedaSelectedSangriaMoedas]</h2></label>
									<input type="range" class="form-range" style="max-width:450px;" min="0" max="5" step="1" id="customRange3"@bind-value="@idMoedaSelectedSangriaMoedas">
								</fieldset>

								<div class="input-group mb-3" style="display: flex; justify-content: center;">
									<span class="input-group-text">$</span>
										<input type="number" class="form-control" style="font-size: xx-large; text-align: center; max-width:200px;" aria-label="Amount (to the nearest dollar)" @bind-value="@qtdMoedasSelectedSangriaMoedas">
									<span class="input-group-text">$</span>
									<button class="btn btn-danger" type="button" id="button-addon2" @onclick="SangriaMoedas"><h5>Retirar <br/> Quantidade</h5></button>
								</div>
							</div>	
						</form>
					</div>
				</div>

				<!--Componente Gerar Troco-->
				<div class="col card bg-light mb-3" style="box-shadow: 10px 5px 5px black; min-width:350px; margin:1rem; text-align: center;">
					<div class="card-header">
						<h1><strong>Gerar Troco</strong></h1>
					</div>
					<div class="card-body">
						<form>
								<h5>Entre com o Valor Para Grerar o Troco:</h5>
								<div class="form-group">
								<fieldset class="form-group">
									<label for="customRange3" class="form-label"><h2>@nomesMoedasGeraTroco[@idMoedaSelectedGeraTroco]</h2></label>
								</fieldset>

								<div class="input-group mb-3" style="display: flex; justify-content: center;">
									<span class="input-group-text">R$</span>
										<input type="text" class="form-control" style="font-size: xx-large; text-align: center; max-width:200px;" aria-label="Amount (to the nearest dollar)" @bind-value="@vlrMoedaInputedGeraTroco">
									<button class="btn btn-secondary" type="button" id="button-addon2"@onclick="()=> GeraTroco(vlrMoedaInputedGeraTroco)"><h5>Gerar Troco</h5></button>
								</div>
							</div>	
						</form>
					</div>
				</div>				
			</div>
		</div>
	</div>
</div>

@code {
	//Instanciação dos Da Classe Principal e a Classe q faz a conexão dom o Db.
	public List<Moeda> moedasCaixa = new List<Moeda>();
	MoedaLogic moedaLogic = new MoedaLogic();
	int qtdTotalMoedas = 0;
	double vlrTotalMoedas = 0.0;

	protected override async Task OnInitializedAsync()
	{
		Console.WriteLine("[Caixa] - Buscando info caixa Db");
		//Chamada do método que cusca as informações do Banco e Popula a tela;
		moedasCaixa = await moedaLogic.List();
		ContaMoedas();
	}

	public void ContaMoedas()
	{
		qtdTotalMoedas = 0;
		vlrTotalMoedas = 0.00;

		foreach (var moeda in moedasCaixa)
		{
			qtdTotalMoedas += moeda.Qtd;
			vlrTotalMoedas += moeda.Valor * moeda.Qtd;
		}
	}

	//Variáveis auxiliares de AbasteceMoedas renderização de Elementos na tela e chamada da função.
	static string nomeMoedaSelectedAbasteceMoedas { get; set; } = "";
	static int idMoedaSelectedAbasteceMoedas { get; set; } = 0;
	static int qtdMoedasSelectedAbasteceMoedas { get; set; } = 0;
	static double vlrMoedaInputedAbasteceMoedas { get; set; } = 0.00;
	static List<string> nomesMoedasAbasteceMoedas = new List<string>()
	{
		"R$1,00 Real",
		"R$0,50 centavos",
		"R$0,25 centavos",
		"R$0,10 centavos",
		"RS0,05 centavos",
		"R$0,01 centavo"
	};

	private async void AbasteceMoedas()
	{
		Console.WriteLine("[Caixa] - AbasteceMoeda");
		foreach (var moeda in moedasCaixa)
		{
			if (moeda.Nome == nomesMoedasAbasteceMoedas[@idMoedaSelectedAbasteceMoedas] && qtdMoedasSelectedAbasteceMoedas > 0)
			{
				moeda.Qtd += qtdMoedasSelectedAbasteceMoedas;
				await moedaLogic.Edit(moeda);
			}
			else if (moeda.Nome == nomesMoedasAbasteceMoedas[@idMoedaSelectedAbasteceMoedas] && qtdMoedasSelectedAbasteceMoedas < 0)
			{
				Console.WriteLine("[Caixa] - Valor negativo");
			}
		}
		qtdMoedasSelectedAbasteceMoedas = 0;
		ContaMoedas();
		//Atualiza a Pagina;
		StateHasChanged();
	}


	//Variáveis auxiliares de SangriaMoedas renderização de Elementos na tela
	static string nomeMoedaSelectedSangriaMoedas { get; set; } = "";
	static int idMoedaSelectedSangriaMoedas { get; set; } = 0;
	static int qtdMoedasSelectedSangriaMoedas { get; set; } = 0;
	static double vlrMoedaInputedSangriaMoedas { get; set; } = 0.00;
	static List<string> nomesMoedasSangriaMoedas = new List<string>()
	{
		"R$1,00 Real",
		"R$0,50 centavos",
		"R$0,25 centavos",
		"R$0,10 centavos",
		"RS0,05 centavos",
		"R$0,01 centavo"
	};

	private async void SangriaMoedas()
	{
		Console.WriteLine("[Caixa] - SangriaMoedas");
		foreach (var moeda in moedasCaixa)
		{
			if (moeda.Nome == nomesMoedasSangriaMoedas[@idMoedaSelectedSangriaMoedas] && moeda.Qtd > qtdMoedasSelectedSangriaMoedas && qtdMoedasSelectedSangriaMoedas > 0)
			{
				Console.WriteLine("[Caixa] - Subtraindo moedas");
				moeda.Qtd -= qtdMoedasSelectedSangriaMoedas;
				await moedaLogic.Edit(moeda);
			}
			else if (moeda.Nome == nomesMoedasSangriaMoedas[@idMoedaSelectedSangriaMoedas] && moeda.Qtd < qtdMoedasSelectedSangriaMoedas)
			{
				Console.WriteLine("[Caixa] - Quantidade de Moedas Insuficiente");
			}
			else if (moeda.Nome == nomesMoedasSangriaMoedas[@idMoedaSelectedSangriaMoedas] && qtdMoedasSelectedSangriaMoedas < 0)
			{
				Console.WriteLine("[Caixa] - Quantidade Negativa");
			}

		}
		qtdMoedasSelectedSangriaMoedas = 0;
		ContaMoedas();
		//Envia os valores atualizados do caixa para o banco;
		//Atualiza a Pagina;
		StateHasChanged();
	}


	//Variáveis auxiliares de GeraTroco renderização de Elementos na tela
	static string nomeMoedaSelectedGeraTroco { get; set; } = "";
	static int idMoedaSelectedGeraTroco { get; set; } = 0;
	static int qtdMoedasSelectedGeraTroco { get; set; } = 0;
	static double vlrMoedaInputedGeraTroco { get; set; } = 0.00;
	static List<string> nomesMoedasGeraTroco = new List<string>()
	{
		"R$1,00 Real",
		"R$0,50 centavos",
		"R$0,25 centavos",
		"R$0,10 centavos",
		"RS0,05 centavos",
		"R$0,01 centavo"
	};

	private void GeraTroco(double valor)
	{
		Console.WriteLine("[Caixa] - GeraTroco");
		//Copiar o Caixa, para verificar se a operação é viavel;
		List<Moeda> copiaCaixa = new List<Moeda>();
		copiaCaixa = moedasCaixa;
		if (valor <= vlrTotalMoedas)
		{
			for (int i = 0; i < copiaCaixa.Count(); i++)
			{
				Console.WriteLine("-----------------------");
				Console.WriteLine("Inicio Moeda: " + copiaCaixa[i].Nome);
				Console.WriteLine("Inicio Moeda qtd: " + copiaCaixa[i].Qtd);
				Console.WriteLine("Inicio Valor: " + valor);
				int qtdTroco = (int)(valor / copiaCaixa[i].Valor);
				double restoDivisao = valor % copiaCaixa[i].Valor;
				restoDivisao = Math.Round(restoDivisao, 2, MidpointRounding.ToEven);

				if (copiaCaixa[i].Qtd > qtdTroco)
				{
					Console.WriteLine("IF");
					Console.WriteLine("Valor IF: " + valor);
					copiaCaixa[i].Qtd -= qtdTroco;
					Console.WriteLine("Qtd Moeda: " + copiaCaixa[i].Qtd);
					valor = restoDivisao;
					valor = Math.Round(valor, 2, MidpointRounding.ToEven);
					Console.WriteLine("Valor: " + valor);
					Console.WriteLine("resto divisão: " + restoDivisao);
					if (valor <= 0.00)
					{
						Console.WriteLine("Valor chegou a ZERO Break IF");
						break;
					}
				}
				else
				{
					Console.WriteLine("ELSE");
					Console.WriteLine("Valor ELSE: " + valor);
					qtdTroco -= copiaCaixa[i].Qtd;
					valor -= copiaCaixa[i].Qtd * copiaCaixa[i].Valor;
					valor = Math.Round(valor, 2, MidpointRounding.ToEven);
					Console.WriteLine("qtd troco: " + qtdTroco);
					Console.WriteLine("Valor sobra: " + valor);
					copiaCaixa[i].Qtd = 0;
					if (valor <= 0.00)
					{
						Console.WriteLine("Valor chegou a ZERO Break ELSE");
						break;
					}
				}
			}
			vlrMoedaInputedGeraTroco = 0.00;
			
		}
		else
		{
			Console.WriteLine("Operação cancelada! Valor de moedas insuficiente!");
		}
		//Copia Lista de Moedas da Operação para Lista de Moedas Atual;
		//moedasCaixa = copiaCaixa;
		//ContaMoedas();
		//Função que envia operações para o banco;
		//Atualiza a Pagina;
		//StateHasChanged();		
	}
		
	
}